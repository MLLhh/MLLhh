主线程下：
1.主窗口定义一个开始嗅探的按钮，关联单击信号和启动嗅探的成员函数（snifferthread_start），并在函数中发射信号（signalStartSniffer）
2.主窗口的头文件定义一个线程对象
3.在主窗口的构造函数中运行开启线程的成员函数
4.在线程开启函数中新建线程对象，并movetothread
5.在线程函数中关联主窗口的信号（signalStartSniffer）和线程对象的嗅探器槽函数（startSniffer）
6.线程启动
7.当服务端收到数据的时候，嗅探器槽函数（startSniffer）就会捕获到数据

sniffer线程下：
1.构造函数中创建套接字
2.嗅探器槽函数中连接套接字并开始抓包
3.data_size = recvfrom(sock_raw, buffer, sizeof(buffer), 0, &saddr, &saddr_size);
   0：这是一个标志位，表示没有额外的 flags 参数传递给recvfrom函数。在某些情况下，可以根据需要设置特定的标志位，例如要求非阻塞操作或请求特   定的数据处理方式。

   &saddr：这是一个指向sockaddr结构的指针，它用于存储发送数据的远程套接字地址。sockaddr是一个通用的地址结构，可以用来表示任何类型的套接字地址。

   &saddr_size：这是一个指向socklen_t类型的指针，它用于存储sockaddr结构的大小。socklen_t是一个无符号整数类型，用于表示地址结构的大小。

   这行代码的作用是：通过sock_raw套接字接收数据，数据存储在buffer数组中。接收到的数据的大小将被存储在data_size变量中。同时，它还获取了发送数据的远程套接字的地址，并将其存储在saddr中，并通过saddr_size返回地址结构的大小。